1. 

Problem Statement :-
Design a class in Java called Fraction. This class is used to represent a ratio of two integers. Include mutator (setter) methods that allow the user to set the numerator and the denominator. Also include a method that returns the value of numerator divided by denominator as a double. Include an additional method that outputs the value of the fraction reduced to lowest terms (e.g., instead of outputting 20/60, the method should output 1/3). Embed your class in a driver code to test your class.

Source Code:-

public class Fraction {
    private int num;
    private int den;
    
    public Fraction() {
        num=1;
        den=1;
    }
    
    public void setNum(int num) {
        this.num = num;
    }
    
    public void setDen(int den) {
        if (den == 0) throw new IllegalArgumentException("Denominator cannot be zero");
        this.den = den;
    }
    
    public double getDecimal() {
        return (double)num / den;
    }
    
    private int gcd(int a, int b) {
        if (b == 0) return Math.abs(a);
        return gcd(b, a % b);
    }
    
    public String getReducedFraction() {
        int gcd = gcd(num, den);
        int reducedNum = num / gcd;
        int reducedDen = den / gcd;
        if (reducedDen < 0) {
            reducedNum = -reducedNum;
            reducedDen = -reducedDen;
        }
        return reducedNum + "/" + reducedDen;
    }
    
    public static void main(String[] args) {
        Fraction f1 = new Fraction();
        f1.setNum(20);
        f1.setDen(60);
        System.out.println("<        1st testing     >");
        System.out.println("Original Values [Numerator] = "+f1.num+", [Denomirator] = "+f1.den);
        System.out.printf("Decimal value: %.2f\n", f1.getDecimal());
        System.out.println("Reduced fraction: " + f1.getReducedFraction());
        
        f1.setNum(15);
        f1.setDen(25);
        System.out.println("<        2nd testing     >");
        System.out.println("New Values [Numerator] = "+f1.num+", [Denomirator] = "+f1.den);
        System.out.printf("New decimal value: %.2f\n", f1.getDecimal());
        System.out.println("New reduced fraction: " + f1.getReducedFraction());
    }
}

Output :-
<        1st testing     >
Original Values [Numerator] = 20, [Denomirator] = 60
Decimal value: 0.33
Reduced fraction: 1/3

<        2nd testing     >
New Values [Numerator] = 15, [Denomirator] = 25
New decimal value: 0.60
New reduced fraction: 3/5
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2.

Problem Statement :-
Design a class in Java named Time. The class contains:
• The instance variables hour, minute, and second that represent a time.
• A no-argument constructor that creates a Time object for the current time (The values of the instance variables will represent the current time).
• A constructor that constructs a Time object with a specified elapsed time since midnight, today, in milliseconds. (The values of the instance variables will represent this time).
• A constructor that constructs a Time object with the specified hour, minute, and second.
• Three getter methods for the instance variables hour, minute, and second, respectively.
• A method named setTime(long elapseTime) that sets a new time for the object using the elapsed time. 
For example, if the elapsed time is 555550000 milliseconds, the hour is 10, the minute is 19, and the second is 10.

Implement the class in Java. 
Write a test program in Java that creates two Time objects (using new Time() and new Time(555550000)) and displays their hour, minute, and second in the format hour: minute: second.
The first two constructors will extract the hour, minute, and second from the elapsed time. 
For the no-argument constructor, the current time can be obtained using System.currentTimeMillis().

Source Code:-

public class Time {
    private int hour;
    private int minute;
    private int second;
    
    public Time() {
        setTime(System.currentTimeMillis());
    }
    
    public Time(long elapsedTime) {
        setTime(elapsedTime);
    }
    
    public Time(int hour, int minute, int second) {
        this.hour = hour;
        this.minute = minute;
        this.second = second;
    }
    
    public int getHour() { 
        return hour; 
    }
    public int getMinute() { 
        return minute; 
    }
    public int getSecond() { 
        return second; 
    }
    
    public void setTime(long elapsedTime) {
        long totalSeconds = elapsedTime / 1000;
        this.second = (int) (totalSeconds % 60);
        long totalMinutes = totalSeconds / 60;
        this.minute = (int) (totalMinutes % 60);
        long totalHours = totalMinutes / 60;
        this.hour = (int) (totalHours % 24);
    }
    
    public static void main(String args[]) {
        Time t1 = new Time();
        Time t2 = new Time(555550000);
        System.out.printf("Current time from [5:30:00(IST)]: %d:%d:%d%n",t1.getHour(), t1.getMinute(), t1.getSecond());
        System.out.printf("Elapsed time: %d:%d:%d%n",t2.getHour(), t2.getMinute(), t2.getSecond());
    }
}

Output :-

Current time from [5:30:00(IST)]: 7:48:50
Elapsed time: 10:19:10
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3.

Problem Statement :-

Define the MyRectangle2D class that contains:
Two double instance variables named x and y that specify the center of the rectangle with getter and
setter methods. (Assume that the rectangle sides are parallel to x- or y- axes.)
• The instance variables width and height with getter and setter methods.
• A no-argument constructor that creates a default rectangle with (0, 0) for (x, y) and 1 for both width and height.
• A constructor that creates a rectangle with the specified x, y, width, and height.
• A method getArea() that returns the area of the rectangle.
• A method getPerimeter() that returns the perimeter of the rectangle.
• A method contains(double x, double y) that returns true if the specified point (x, y) is inside this rectangle (see Figure 1a).
• A method contains(MyRectangle2D r) that returns true if the specified rectangle is inside this rectangle (see Figure 1b).
• A method overlaps(MyRectangle2D r) that returns true if the specified rectangle overlaps with this rectangle (see Figure 1c).
Implement the class. Write a driver class that creates a MyRectangle2D object r1 (new MyRectangle2D(2,2, 5.5, 4.9)), displays its area and perimeter, and displays the result of
r1.contains(3, 3), r1.contains(new MyRectangle2D(4, 5, 10.5, 3.2)), and r1.overlaps(new MyRectangle2D(3, 5, 2.3, 5.4)).
A bounding rectangle is the minimum rectangle that encloses a set of points in a two-dimensional plane, as
shown in Figure 1d. 
Write a method that returns a bounding rectangle for a set of points in a two-dimensional plane, as follows:
public static MyRectangle2D getRectangle(double[][] points)
The Rectangle2D class is defined above. Write another test program that prompts the user to enter five points and displays the bounding rectangle’s center, width, and height. Here is a sample run:
Enter five points: 1.0 2.5 3 4 5 6 7 8 9 10
The bounding rectangle's center (5.0, 6.25), width 8.0, height 7.5

Source Code :-

import java.util.*;

public class MyRectangle2D {
    private double x, y, width, height;
    
    public MyRectangle2D() {
        this(0, 0, 1, 1);
    }
    
    public MyRectangle2D(double x, double y, double width, double height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
    
    // Getters and setters
    public double getX() { return x; }
    public void setX(double x) { this.x = x; }
    public double getY() { return y; }
    public void setY(double y) { this.y = y; }
    public double getWidth() { return width; }
    public void setWidth(double width) { this.width = width; }
    public double getHeight() { return height; }
    public void setHeight(double height) { this.height = height; }
    
    public double getArea() { return width * height; }
    public double getPerimeter() { return 2 * (width + height); }
    
    public boolean contains(double x, double y) {
        return x >= this.x - width/2 && x <= this.x + width/2 &&
               y >= this.y - height/2 && y <= this.y + height/2;
    }
    
    public boolean contains(MyRectangle2D r) {
        double left1 = x - width/2, right1 = x + width/2;
        double top1 = y + height/2, bottom1 = y - height/2;
        double left2 = r.x - r.width/2, right2 = r.x + r.width/2;
        double top2 = r.y + r.height/2, bottom2 = r.y - r.height/2;
        
        return left2 >= left1 && right2 <= right1 && 
               bottom2 >= bottom1 && top2 <= top1;
    }
    
    public boolean overlaps(MyRectangle2D r) {
        double left1 = x - width/2, right1 = x + width/2;
        double top1 = y + height/2, bottom1 = y - height/2;
        double left2 = r.x - r.width/2, right2 = r.x + r.width/2;
        double top2 = r.y + r.height/2, bottom2 = r.y - r.height/2;
        
        return left1 < right2 && right1 > left2 && 
               bottom1 < top2 && top1 > bottom2;
    }
    
    public static MyRectangle2D getRectangle(double[][] points) {
        double minX = points[0][0], maxX = points[0][0];
        double minY = points[0][1], maxY = points[0][1];
        
        for (int i = 1; i < points.length; i++) {
            minX = Math.min(minX, points[i][0]);
            maxX = Math.max(maxX, points[i][0]);
            minY = Math.min(minY, points[i][1]);
            maxY = Math.max(maxY, points[i][1]);
        }
        
        double width = maxX - minX;
        double height = maxY - minY;
        double centerX = (minX + maxX) / 2;
        double centerY = (minY + maxY) / 2;
        
        return new MyRectangle2D(centerX, centerY, width, height);
    }
    
    public static void main(String[] args) {
        // Test 1
        MyRectangle2D r1 = new MyRectangle2D(2, 2, 5.5, 4.9);
        System.out.println("Area: " + r1.getArea());
        System.out.println("Perimeter: " + r1.getPerimeter());
        System.out.println("Contains (3,3): " + r1.contains(3, 3));
        System.out.println("Contains rectangle: " + 
            r1.contains(new MyRectangle2D(4, 5, 10.5, 3.2)));
        System.out.println("Overlaps rectangle: " + 
            r1.overlaps(new MyRectangle2D(3, 5, 2.3, 5.4)));
            
        // Test 2
        Scanner input = new Scanner(System.in);
        double[][] points = new double[5][2];
        System.out.println("Enter five points:");
        for (int i = 0; i < 5; i++) {
            points[i][0] = input.nextDouble();
            points[i][1] = input.nextDouble();
        }
        input.close();
        
        MyRectangle2D bounds = getRectangle(points);
        System.out.printf("The bounding rectangle's center (%.1f, %.2f), width %.1f, height %.2f%n",
            bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());
    }
}

Output :-

Area: 26.950000000000003
Perimeter: 20.8
Contains (3,3): true
Contains rectangle: false
Overlaps rectangle: true
Enter five points:
1 2
5 5
5 5
5 6
7 7
The bounding rectangle's center (4.0, 4.50), width 6.0, height 5.00
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------